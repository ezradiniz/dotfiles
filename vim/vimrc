""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Vim-Plug core (https://github.com/editor-bootstrap/vim-bootstrap)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("nvim")
  let vimplug_exists=expand('~/.local/share/nvim/site/autoload/plug.vim')
else
  let vimplug_exists=expand('~/.vim/autoload/plug.vim')
endif

if !filereadable(vimplug_exists)
  if !executable("curl")
    echoerr "You have to install curl or first install vim-plug yourself!"
    execute "q!"
  endif
  echo "Installing Vim-Plug..."
  echo ""
  silent exec "!\curl -fLo " . vimplug_exists . " --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
  let g:not_finish_vimplug = "yes"

  autocmd VimEnter * PlugInstall
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Load vim-plug
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin(expand('~/.vim/plugged'))

Plug 'AndrewRadev/splitjoin.vim'
Plug 'airblade/vim-gitgutter'
Plug 'cohama/lexima.vim'
Plug 'fatih/vim-go', {'do': ':GoInstallBinaries'}
Plug 'junegunn/fzf', { 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'justinmk/vim-dirvish'
Plug 'kkga/vim-envy'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'sheerun/vim-polyglot'
Plug 'terryma/vim-expand-region'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'w0rp/ale'

call plug#end()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Core Setup
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible
filetype off
filetype plugin indent on

let mapleader = ","

set path+=**
set history=10000
set clipboard=unnamed
set autoread

nmap <leader>w :w!<cr>
if !has("nvim")
  command! W w !sudo tee % > /dev/null
endif

set shortmess+=c
set updatetime=50
set cursorline
set nocursorcolumn
let $LANG='en'
set langmenu=en
set wildmenu
set wildignore=*.o,*~,*.pyc,*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store,node_modules/**
set ruler
set cmdheight=1
set signcolumn=auto
set hidden
set backspace=eol,start,indent
set whichwrap+=<,>,h,l
set ignorecase
set smartcase
set grepprg=/bin/grep\ -nH
set incsearch
set lazyredraw
set magic
set showmatch
set mat=2
set noerrorbells
set novisualbell
set t_vb=
set t_ut=
set tm=500
set relativenumber
set number
set virtualedit=block
set autowrite
set showcmd
set maxmempattern=20000

" highlighting
set hlsearch
nnoremap <leader><Enter> :noh<CR>

set notimeout
set ttimeout
set ttimeoutlen=0
set ttyfast

set colorcolumn=80

syntax enable
if exists('+termguicolors')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    set termguicolors
endif

set background=light
colorscheme envy

hi DiffAdd       guifg=NONE   guibg=#bada9f
hi DiffChange    guifg=NONE   guibg=#e5d5ac
hi DiffDelete    guifg=NONE   guibg=#ffb0b0
hi DiffText      guifg=NONE   guibg=#8cbee2

set encoding=utf8
set nobackup
set nowb
set noswapfile
set lbr
set nowrap
set tw=80
set linebreak
let &showbreak='â–· '
set fileformats=unix,dos
set binary
set noeol
set listchars=tab:\|\ ,trail:.,extends:>,precedes:<
set list
set scrolloff=4

set expandtab
set smarttab
set shiftwidth=4
set softtabstop=4

map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

map <leader>bd :Bclose<cr>:tabclose<cr>gT
map <leader>ba :bufdo bd<cr>
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove
map <leader>ty :tabnext<cr>
map <leader>tr :tabprev<cr>

try
  set switchbuf=usetab
  set stal=2
catch
endtry

set laststatus=2
set noshowmode

noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm
map <leader>q :e ~/.vim/buffer<cr>
map <leader>x :e ~/.vim/buffer.md<cr>

if has("nvim")
  noremap <leader>e :e! ~/.config/nvim/init.vim<cr>
else
  noremap <leader>e :e! ~/.vimrc<cr>
endif

try
    set undofile
    set undodir=~/.vim/cache
catch
endtry
map <leader>cco :botright cope<cr>
map <leader>llo :botright lope<cr>
map <leader>co ggVGy:tabnew<cr>:set syntax=qf<cr>pgg

vnoremap <silent> * :<C-u>call VisualSelection()<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :<C-u>call VisualSelection()<CR>?<C-R>=@/<CR><CR>
vnoremap <silent> R :<C-u>call VisualSelection()<CR>:Rg <C-R>=@/<CR><CR>

nnoremap <leader>cd :lcd %:p:h<cr>

""""""""""""""""""""""""""""""
" => Core functions
""""""""""""""""""""""""""""""
fun! CleanExtraSpaces()
    let save_cursor = getpos(".")
    let old_query = getreg('/')
    silent! %s/\s\+$//e
    call setpos('.', save_cursor)
    call setreg('/', old_query)
endfun

function! VisualSelection() range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", "\\/.*'$^~[]")
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")

   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif

   if bufnr("%") == l:currentBufNum
     new
   endif

   if buflisted(l:currentBufNum)
     execute("bdelete! ".l:currentBufNum)
   endif
endfunction

function! MkNonExDir(file, buf)
  if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
    let dir=fnamemodify(a:file, ':h')
      if !isdirectory(dir)
        call mkdir(dir, 'p')
      endif
    endif
endfunction

xnoremap @ :<C-u>call ExecuteMacroOverVisualRange()<CR>
function! ExecuteMacroOverVisualRange()
  echo "@".getcmdline()
  execute ":'<,'>normal @".nr2char(getchar())
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plug Setup
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
" => vim-fugitive
""""""""""""""""""""""""""""""
let g:fugitive_pty = 0

command! -bang -bar -nargs=* Gpush execute 'Dispatch<bang> -dir=' .
      \ fnameescape(FugitiveGitDir()) 'git push' <q-args>
command! -bang -bar -nargs=* Gfetch execute 'Dispatch<bang> -dir=' .
      \ fnameescape(FugitiveGitDir()) 'git fetch' <q-args>

nnoremap <leader>G :Git<space>
nnoremap <leader>gps :Gpush<cr>
nnoremap <leader>gpf :Gpush --force-with-lease<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gf :Gfetch<cr>
nnoremap <leader>gm :Git merge<cr>
nnoremap <leader>gbr :Git branch<cr>
nnoremap <leader>gbl :Git blame<cr>
nnoremap <leader>gh :Git show<cr>
nnoremap <leader>gl :Git log --oneline --decorate --graph<cr>
nnoremap <leader>0gl :Git log --oneline --decorate --graph %<cr>

""""""""""""""""""""""""""""""
" => vim-dirvish
""""""""""""""""""""""""""""""
augroup dirvish_config
    autocmd!
    autocmd FileType dirvish silent! unmap <buffer> <C-p>
augroup end

""""""""""""""""""""""""""""""
" => fzf.vim
""""""""""""""""""""""""""""""
nnoremap <c-b> :Buffers<cr>
nnoremap <c-f> :Files<cr>
nnoremap <c-p> :GFiles<cr>
nnoremap <leader>` :Marks<cr>
nnoremap q: :History:<cr>
nnoremap <leader>rg :Rg<space>
let g:fzf_layout = { 'down': '~45%' }
let g:fzf_buffers_jump = 1

""""""""""""""""""""""""""""""
" => Vim-go
""""""""""""""""""""""""""""""
let g:go_def_mapping_enabled = 0
let g:go_code_completion_enabled = 0
let g:go_list_type = "quickfix"
let g:go_fmt_command = "goimports"
let g:go_fmt_fail_silently = 1

""""""""""""""""""""""""""""""
" => ale (syntax checker)
""""""""""""""""""""""""""""""
let g:ale_disable_lsp = 1

let g:ale_linters = {}
:call extend(g:ale_linters, {
    \"go": ['golint', 'go vet'], })

:call extend(g:ale_linters, {
    \'python': ['flake8'], })

:call extend(g:ale_linters, {
    \'typescript': ['tslint', 'eslint'], })

:call extend(g:ale_linters, {
    \'typescriptreact': ['tslint', 'eslint'], })

:call extend(g:ale_linters, {
    \'javascript': ['eslint'], })

nnoremap ]r :ALENextWrap<cr>
nnoremap [r :ALEPreviousWrap<cr>

""""""""""""""""""""""""""""""
" => Git gutter (Git diff)
""""""""""""""""""""""""""""""
let g:gitgutter_enabled=1
nnoremap <leader>dd : GitGutterLineHighlightsToggle<cr>

""""""""""""""""""""""""""""""
" => Coc-vim
""""""""""""""""""""""""""""""
" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> for trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Symbol renaming
nmap <leader>rn <Plug>(coc-rename)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Autocmd
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
augroup MyAutoCmd
  autocmd!

  autocmd VimResized * wincmd =
  autocmd FocusGained,BufEnter * :checktime
  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
  autocmd BufWritePre * :call CleanExtraSpaces()
  autocmd BufWritePre * :call MkNonExDir(expand('<afile>'), +expand('<abuf>'))
  autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4 softtabstop=4
  autocmd BufNewFile,BufRead *.ts,*.tsx setlocal expandtab smarttab shiftwidth=4 softtabstop=4
  autocmd FileType make setlocal noexpandtab
  autocmd BufNewFile,BufRead *.md setlocal wrap
augroup end

augroup QuickFix
    autocmd!
    autocmd FileType qf wincmd J
    autocmd FileType qf setlocal wrap
augroup end

if has("nvim")
  augroup highlight_yank
    autocmd!
    au TextYankPost * silent! lua vim.highlight.on_yank {higroup="IncSearch", timeout=150}
  augroup end
endif